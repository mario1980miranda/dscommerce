1 - modelo de dominio User -> Role
2 - nova classe Role
3 - alterar classe User 
3.1 - relacionar N-N com Role
3.2 - adicionar get
3.3 - addRole
3.4 - hasRole
3.5 - Testar com o H2 
3.6 - adicionar no seed (ROLE_CLIENT no lugar de OPERATOR e senha encriptada)

4 - Adicionar as dependencias SpringSecurity, AuthorizationServer e ResourceServer
4.1 - Role impl GrantedAuthority e Override no getAuthority
4.2 - User impl UserDetails
4.3 - username = email
4.4 - getAuthorities retorna roles
4.5 - os 4 metodos relacionados a conta retornam true

5 - adicionar pacote projections
5.1 - adicionar a projection
5.2 - adicionar UserRepository com nativeQuery
5.3 - implementar UserService

6 - adicionar valores de configuracao no app.props
7 - Checklist do Oauth2
7.1 - adicionar pasta config
7.2 - adicionar classes @Config de AuthServer e ResourceServer
7.3 - adicionar pacote customgrant
7.4 - adicionar classes do projeto demo e ajustar os imports
7.5 - testar o login

8 - Controle de acesso por perfil e rota
8.1 - adicionar nos controllers (insert, update e delete) a annotation de autorizacao ADMIN

9 - Obter o usuario logado
9.1 - No UserService criar um metodo protegido para retornar o usuario autenticado pelo username do claims do token
9.2 - No UserRepository criar um metodo queryMethod que retorna Optional<User> por email
9.3 - Criar um DTO para o usuario
9.4 - No UserService criar metodo para recuperar o user logado (transactional readonly)
9.5 - Criar UserController com a operacao para recuperar o usuario logado restrita para requisicoes autenticadas (hasAnyRole)
